---
- name: Configure kubernetes
  # hosts: all
  hosts: localhost
  connection: local
  gather_facts: no
  # become: yes
  vars:
    machine_type: n1-standard-1
    project_id: "docker-spinor72"
    credentials_file: ~/.config/gcloud/docker-ea4939aad790.json
    service_account_email: 347423440406-compute@developer.gserviceaccount.com
    region: "europe-west4"

#  When running Ansible inside a GCE VM you can use the service account credentials from the local metadata server 
# by setting both service_account_email and credentials_file to a blank string

  tasks:
    - name: Download cfssl
      get_url:
        url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
        dest: /usr/local/bin/cfssl
        mode: +x
# cfssl version
# Version: 1.2.0

    - name: Download cfssljson
      get_url:
        url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
        dest: /usr/local/bin/cfssljson
        mode: +x

    - name: Download kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: +x
#  kubectl version --client  version 1.10.2

#  Virtual Private Cloud Network
    - name: Create kubernetes Network
      gce_net:
        name: kubernetes-the-hard-way
        mode: custom
        subnet_name: "kubernetes"
        subnet_region: "{{ region }}"
        ipv4_range: '10.240.0.0/24'
        state: "present"

    - name: Create a firewall rule that allows internal communication across all protocols
      gce_net:
        name: kubernetes-the-hard-way
        fwname: "kubernetes-the-hard-way-allow-{{ item |replace(':', '-') }}-internal"
        allowed: "{{ item }}"
        state: "present"
        src_range: ['10.240.0.0/24','10.200.0.0/16']
      with_items:
        - tcp
        - udp
        - icmp

    - name: Create a firewall rule that allows external SSH, ICMP, and HTTPS
      gce_net:
        name: kubernetes-the-hard-way
        fwname: "kubernetes-the-hard-way-allow-{{ item |replace(':', '-') }}-external"
        allowed: "{{ item }}"
        state: "present"
        src_range: ['0.0.0.0/0']
      with_items:
        - tcp:22
        - tcp:6443
        - icmp


    - name: Reserve Kubernetes Public IP Address
      gce_eip:
        name: kubernetes-the-hard-way
        region: "{{ region }}"
        state: present
      register: kube_ip



# Kubernetes VMs

    - name: Create Kubernetes Controllers
      gce:
        name: "controller-{{ item }}"
        machine_type: "n1-standard-1"
        disk_size: 200
        ip_forward: yes
        image: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
        service_account_permissions: compute-rw,storage-ro,service-management,service-control,logging-write,monitoring
        network: kubernetes-the-hard-way
        subnetwork:  kubernetes
        # private-network-ip 10.240.0.1${i}
        zone: "{{ region }}-b"
        tags: kubernetes-the-hard-way,controller
      with_sequence: count=3
      register: kube_controllers

    - name: Create Kubernetes Workers
      gce:
        name: "worker-{{ item }}"
        machine_type: "n1-standard-1"
        disk_size: 200
        ip_forward: yes
        image: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
        metadata: '{"pod-cidr":"10.200.{{ item }}.0/24"}'
        service_account_permissions: compute-rw,storage-ro,service-management,service-control,logging-write,monitoring
        network: kubernetes-the-hard-way
        subnetwork:  kubernetes
        # private-network-ip 10.240.0.2${i} 
        zone: "{{ region }}-b"
        tags: kubernetes-the-hard-way,worker
      with_sequence: count=3
      register: kube_workers

    - debug:
        var: kube_ip
        # verbosity: 1

    - debug:
        var: kube_controllers
        # verbosity: 1

    - debug:
        var: kube_controllers
        # verbosity: 1

# Kubernetes certs
    - name: CA csr
      template:
        src: templates/csr.j2
        dest: ca-csr.json
      vars:
        cn: Kubernetes
        o: Kubernetes
        ou: CA

    - name: Create ssl certs
      shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
      args:
        creates: ca-key.pem


    - name: Admin csr
      template:
        src: templates/csr.j2
        dest: admin-csr.json
      vars:
        cn: admin
        o: system:masters
        ou: Kubernetes The Hard Way

    - name: Create admin cert
      shell: |
        cfssl gencert \
        -ca=ca.pem \
        -ca-key=ca-key.pem \
        -config=ca-config.json \
        -profile=kubernetes \
        admin-csr.json | cfssljson -bare admin
      args:
        creates: admin-key.pem

    - name: Workers csr
      template:
        src: templates/csr.j2
        dest: "{{ item.instance_data[0].name }}-csr.json"
      vars:
        cn: "system:node:{{ item.instance_data[0].name }}"
        o: system:nodes
        ou: Kubernetes The Hard Way
      with_items: "{{ kube_workers.results }}"

    - name: Create worker cert
      shell: "cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ item.instance_data[0].name }},kube_ip.address,{{ item.instance_data[0].private_ip }} -profile=kubernetes {{ item.instance_data[0].name }}-csr.json | cfssljson -bare {{ item.instance_data[0].name }}"
      args:
        creates: "{{ item.instance_data[0].name }}-key.pem"
      with_items: "{{ kube_workers.results }}"

